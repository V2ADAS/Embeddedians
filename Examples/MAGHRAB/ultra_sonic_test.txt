
#include "LIB/STD_TYPES.h"
#include "LIB/BIT_MATH.h"
#include "MCAL/MGPIO/MGPIO_Int.h"
#include "MCAL/MRCC/MRCC_Int.h"
#include"MCAL/MEXTI/MEXTI_Int.h"
#include"MCAL/MNVIC/MNVIC_Int.h"
#include"MCAL/MSTK/MSYSTICK_Int.h"
#include"MCAL/MTIMER/MTIMER_Int.h"
#include"HAL/HSERVO/HSERVO_Int.h"
#include"HAL/HULTRA_SONIC/HULTRA_SONIC_Int.h"
#include"MCAL/MI2C/MI2C_int.h"
#include"HAL/HLCD/HLCD_Int.h"
#include"HAL/HMPU/MPU6050_t.h"

void Led(void){
	static u8 Tog = 1;
	//Toggle Led
	MGPIO_vSetPinValue(PORTC,PIN13,Tog);
	Tog ^= 1;
	MSYSTICK_vDelayms(5000);
}

void crt9(){
	static u8 Tog=0;
	MGPIO_vSetPinValue(PORTA, PIN1, Tog);
	Tog ^=1;
}

#define SCB_CPACR       (*((volatile u32 *)0xE000ED88))

int main(){
	SCB_CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
	//Initialize RCC
	MRCC_vInit();
	//Enable GPIO Clock
	MRCC_vEnableClock(GPIOA_EN);
	MRCC_vEnableClock(GPIOB_EN);
	MRCC_vEnableClock(GPIOC_EN);
	//Enable SYSCFG
	MRCC_vEnableClock(SYSCFG_EN);

	//Initialize SYSTICK
	MSYSTICK_vInit();

	MGPIO_vSetPinMode(PORTA,PIN0,INPUT);
	MGPIO_vSetPinInPutType(PORTA,PIN0,PULLUP);

	//Initialize EXTI
	MNVIC_vEnableInterrupt(NVIC_EXTI0);

	SYSCFG_vConfigEXTI_Line(EXTI_PORTA,EXTI0);
	MEXTI_vEnableInterrupt(EXTI0);
	//Set EXTI0 to RISING
	MEXTI_vInterruptTrigger(EXTI0, FALLING);
	//Set Call Back Function
	MEXTI_vCallBack(EXTI0,&Led);

	//Set LED PIN as OUTPUT
	MGPIO_vSetPinMode(PORTC,PIN13,OUTPUT);
	//******************I2C**********************//
	// ENABLE I2C1
	MRCC_vEnableClock(I2C1_EN);
	/* I2C 1 Initialization */
	MGPIO_vSetPinMode(PORTB,PIN6,ALTFUNC);
	MGPIO_vSetPinMode(PORTB,PIN7,ALTFUNC);

	MGPIO_vSetPinOutPutType(PORTB, PIN6, GPIO_OPEN_DRAIN);
	MGPIO_vSetPinOutPutType(PORTB, PIN7, GPIO_OPEN_DRAIN);
	MGPIO_vSetPinOutPutSpeed(PORTB, PIN6, MGPIO_SPEED_VHIGH);
	MGPIO_vSetPinOutPutSpeed(PORTB, PIN7, MGPIO_SPEED_VHIGH);

	MGPIO_vSetAlternativeFunction(PORTB, PIN6,MGPIO_ALTFUNC_I2C13);
	MGPIO_vSetAlternativeFunction(PORTB, PIN7,MGPIO_ALTFUNC_I2C13);

	MI2C_vMasterInit(I2C1);
	//**************TIMER1**************************//
	MRCC_vEnableClock(TIM1_EN);
	MRCC_vEnableClock(TIM2_EN);
	MRCC_vEnableClock(TIM3_EN);
	MRCC_vEnableClock(TIM4_EN);
	MRCC_vEnableClock(TIM5_EN);

	MRCC_vEnableClock(TIM9_EN);
	MRCC_vEnableClock(TIM10_EN);
	MRCC_vEnableClock(TIM11_EN);

	MNVIC_vEnableInterrupt(NVIC_TIM1_BRK_TIM9);
	MNVIC_vEnableInterrupt(NVIC_TIM1_UP_TIM10);
	MNVIC_vEnableInterrupt(NVIC_TIM1_TRG_COM_TIM11);
	MNVIC_vEnableInterrupt(NVIC_TIM1_CC);
	MNVIC_vEnableInterrupt(NVIC_TIM2);
	MNVIC_vEnableInterrupt(NVIC_TIM3);
	MNVIC_vEnableInterrupt(NVIC_TIM4);
	MNVIC_vEnableInterrupt(NVIC_TIM5);

	MGPIO_vSetPinMode(PORTA, PIN1, OUTPUT);
	/*MNVIC_vInitGrouping(GP16SUB0);
	MNVIC_vSetIntPriority(NVIC_TIM1_BRK_TIM9, GP1, SUB0);
	MNVIC_vSetIntPriority(NVIC_EXTI0, GP9, SUB0);
	MGPIO_vSetPinMode(PORTA, PIN1, OUTPUT);
	MTIMER_vPeriodicMS(TIMER9, 2000);
	MTIMER_CallBack(TIMER9, &crt9);*/

	HLCD_vInit();
	HLCD_vSendString("yaw:");
	HLCD_vPutCur(1, 0);
	HLCD_vSendString("X:");
	MSYSTICK_vDelayms(1000);
	HULTRA_vInitialize(ULTRA_SONIC1, TIMER2, CH2);
	//HMPU_vInit();
	f64 Distance;
	while(1){

		HULTRA_vSendTrigger(PORTB, PIN12);
		HULTRA_vGetDistance(ULTRA_SONIC1, &Distance);
		HLCD_vPutCur(1, 5);
		HLCD_vSendNum((f32)Distance);
		if(Distance <10){
			MGPIO_vSetPinValue(PORTA, PIN1, HIGH);
		}
		else
			MGPIO_vSetPinValue(PORTA, PIN1, LOW);
		MSYSTICK_vDelayms(100);
		//HMPU_RPW();
		//MSYSTICK_vDelayms(100);*/

	}

}






